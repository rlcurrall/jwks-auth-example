@page
@model AuthServer.Pages.Auth.LoginModel
@{
    ViewData["Title"] = "Login";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="color-scheme" content="light dark">
    <title>Login - Auth Server</title>
    <style>
        :root {
            --bg-color: #f5f5f5;
            --card-bg-color: white;
            --text-color: #333;
            --input-border-color: #ddd;
            --input-bg-color: white;
            --button-bg-color: #4CAF50;
            --button-hover-bg-color: #45a049;
            --button-text-color: white;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --error-color: #f44336;
        }

        @@media (prefers-color-scheme: dark) {
            :root {
                --bg-color: #1a1a1a;
                --card-bg-color: #2d2d2d;
                --text-color: #e0e0e0;
                --input-border-color: #444;
                --input-bg-color: #3d3d3d;
                --button-bg-color: #388e3c;
                --button-hover-bg-color: #2e7d32;
                --button-text-color: #ffffff;
                --shadow-color: rgba(0, 0, 0, 0.3);
                --error-color: #f44336;
            }
        }

        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .login-container {
            background-color: var(--card-bg-color);
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px var(--shadow-color);
            width: 350px;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }

        h1 {
            text-align: center;
            margin-bottom: 1.5rem;
            color: var(--text-color);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: var(--text-color);
        }

        input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--input-border-color);
            border-radius: 4px;
            font-size: 1rem;
            box-sizing: border-box;
            background-color: var(--input-bg-color);
            color: var(--text-color);
            transition: border-color 0.3s ease, background-color 0.3s ease, color 0.3s ease;
        }

        input:focus {
            outline: none;
            border-color: var(--button-bg-color);
        }

        button {
            width: 100%;
            padding: 0.75rem;
            background-color: var(--button-bg-color);
            color: var(--button-text-color);
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 1rem;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: var(--button-hover-bg-color);
        }

        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .hidden {
            display: none;
        }

        .error-message {
            color: var(--error-color);
            margin-top: 10px;
            text-align: center;
            font-size: 0.9rem;
        }

        .text-danger {
            color: var(--error-color);
        }
    </style>
</head>
<body>
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="error-banner" style="position: fixed; top: 0; left: 0; width: 100%; background-color: var(--error-color); color: white; padding: 10px; text-align: center;">
            @Model.ErrorMessage
        </div>
    }

    <div class="login-container">
        <h1>Login</h1>
        <form method="post">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="Username" required>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="Password" required>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>

            @if (string.IsNullOrEmpty(Model.Tenant))
            {
                <div class="form-group" id="tenant-group">
                    <label for="tenant">Tenant</label>
                    <input type="text" id="tenant" name="Tenant" required value="tenant1">
                    <span asp-validation-for="Tenant" class="text-danger"></span>
                </div>
            }
            else
            {
                <input type="hidden" id="tenant" name="Tenant" value="@Model.Tenant">
            }

            @Html.AntiForgeryToken()

            @if (!string.IsNullOrEmpty(Model.ValidationError))
            {
                <div class="error-message">@Model.ValidationError</div>
            }

            <button type="submit">Login</button>
        </form>
    </div>
</body>
</html>
